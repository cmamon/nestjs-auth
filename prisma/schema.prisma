// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generate all models for a carpool application

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  password             String
  firstName            String         @default("")
  lastName             String         @default("")
  phone                String         @default("")
  avatarUrl            String?
  birthDate            DateTime?
  role                 UserRole       @default(USER)
  refreshToken         String?
  resetPasswordToken   String?
  isEmailVerified      Boolean        @default(false)
  isPhoneVerified      Boolean        @default(false)
  isBanned             Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  // relationships
  cars                 Car[]
  trips                Trip[]         @relation("PassengerTrips")
  Trip                 Trip[]
  UserReviewAuthor     UserReview[]   @relation("UserReviewAuthor")
  UserReviewTargetUser UserReview[]   @relation("UserReviewTargetUser")
  tripRequest          TripRequest[]
  Chat                 Chat?          @relation(fields: [chatId], references: [id])
  chatId               Int?
  Message              Message[]
  Notification         Notification[]
  Payment              Payment[]
}

model Car {
  id        Int      @id @default(autoincrement())
  make      String
  model     String
  year      Int
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  trips     Trip[]
}

model Trip {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  // relationships
  driver         User          @relation(fields: [driverId], references: [id])
  driverId       Int
  car            Car           @relation(fields: [carId], references: [id])
  carId          Int
  passengers     User[]        @relation("PassengerTrips")
  userReviews    UserReview[]
  tripRequests   TripRequest[]
  payments       Payment[]
  locations      Location[] // the locations of the Trip (from, to, etc)
  chatId         Int?
  // fields
  fromLocation   String
  fromLatitude   Float
  fromLongitude  Float
  toLocation     String
  toLatitude     Float
  toLongitude    Float
  departAt       DateTime
  arriveAt       DateTime
  price          Float
  availableSeats Int
  totalSeats     Int
  status         TripStatus
}

enum TripStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

model UserReview {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // relationships
  author       User     @relation(fields: [authorId], references: [id], name: "UserReviewAuthor")
  authorId     Int
  targetUser   User     @relation(fields: [targetUserId], references: [id], name: "UserReviewTargetUser")
  targetUserId Int
  trip         Trip     @relation(fields: [tripId], references: [id])
  tripId       Int
  comment      String
  rating       Int
}

model TripRequest {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // relationships
  trip        Trip          @relation(fields: [tripId], references: [id])
  tripId      Int
  passenger   User          @relation(fields: [passengerId], references: [id])
  passengerId Int
  status      RequestStatus
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // relationships
  messages  Message[]
  users     User[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  content   String
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  read      Boolean  @default(false)
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships
  trip      Trip     @relation(fields: [tripId], references: [id])
  tripId    Int
  address   String
  lat       Float
  lng       Float
}

model Payment {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  // relationships
  trip      Trip          @relation(fields: [tripId], references: [id])
  tripId    Int
  payer     User          @relation(fields: [payerId], references: [id])
  payerId   Int
  amount    Float
  status    PaymentStatus
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}
